@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using SweetAcademy.Data.Models
@using SweetAcademy.Services.Data.Interfaces
@using System.Security.Claims
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IChefService ChefService

@{
    bool IsChef = false;
    ChefViewModel chef = null;
    if (User.Identity.Name != null)
    {
        Guid userId = Guid.Parse(User.FindFirstValue(ClaimTypes.NameIdentifier));
        IsChef = await ChefService.ChefExistByUserIdAsync(userId);
        if (IsChef)
        {
            chef = await ChefService.GetChefByIdAsync(await ChefService.GetChefIdByUserIdAsync(userId));
        }
    }
}

<ul class="navbar-nav">
    @if (SignInManager.IsSignedIn(User))
    {
        @if (IsChef)
        {
            <li class="nav-item">
                <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello, Chef @chef.FullName!</a>
            </li>
        }
        else
        {
            <li class="nav-item">
                <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello, @User.Identity?.Name!</a>
            </li>
        }

        <li class="nav-item">
            <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
                <button type="submit" class="nav-link btn btn-link text-dark">Logout</button>
            </form>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">Register</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Login</a>
        </li>
    }
</ul>
